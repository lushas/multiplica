// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package multiplica

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiplicarClient is the client API for Multiplicar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplicarClient interface {
	Multiplica(ctx context.Context, in *MessageIn, opts ...grpc.CallOption) (*MessageOut, error)
}

type multiplicarClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplicarClient(cc grpc.ClientConnInterface) MultiplicarClient {
	return &multiplicarClient{cc}
}

func (c *multiplicarClient) Multiplica(ctx context.Context, in *MessageIn, opts ...grpc.CallOption) (*MessageOut, error) {
	out := new(MessageOut)
	err := c.cc.Invoke(ctx, "/multiplica.Multiplicar/Multiplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiplicarServer is the server API for Multiplicar service.
// All implementations must embed UnimplementedMultiplicarServer
// for forward compatibility
type MultiplicarServer interface {
	Multiplica(context.Context, *MessageIn) (*MessageOut, error)
	mustEmbedUnimplementedMultiplicarServer()
}

// UnimplementedMultiplicarServer must be embedded to have forward compatible implementations.
type UnimplementedMultiplicarServer struct {
}

func (UnimplementedMultiplicarServer) Multiplica(context.Context, *MessageIn) (*MessageOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplica not implemented")
}
func (UnimplementedMultiplicarServer) mustEmbedUnimplementedMultiplicarServer() {}

// UnsafeMultiplicarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplicarServer will
// result in compilation errors.
type UnsafeMultiplicarServer interface {
	mustEmbedUnimplementedMultiplicarServer()
}

func RegisterMultiplicarServer(s grpc.ServiceRegistrar, srv MultiplicarServer) {
	s.RegisterService(&Multiplicar_ServiceDesc, srv)
}

func _Multiplicar_Multiplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplicarServer).Multiplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiplica.Multiplicar/Multiplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplicarServer).Multiplica(ctx, req.(*MessageIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Multiplicar_ServiceDesc is the grpc.ServiceDesc for Multiplicar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multiplicar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiplica.Multiplicar",
	HandlerType: (*MultiplicarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiplica",
			Handler:    _Multiplicar_Multiplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiplica/multiplica.proto",
}
